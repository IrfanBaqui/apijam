swagger: "2.0"
info:
  description: "Litmos' Application Programming Interface (API) enables developers to connect external applications to Litmos LMS. The API gives organizations the ability to streamline data and processes across information systems for operational efficiency, including the automation of training assignments and the moderation of administrative tasks."
  version: "1.0.0"
  title: "Litmos API Portal"
  termsOfService: "https://www.litmos.com/terms-conditions"
  contact:
    email: "apiteam@litmos.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "apijams-amer-10-test.apigee.net"
basePath: "/v1"
tags:
- name: "users"
  description: "Everything about your Users"
- name: "teams"
  description: "Access to your teams"
- name: "courses"
  description: "Operations on your courses"
schemes:
- "https"
- "http"
paths:
  /users:
    post:
      tags:
      - "users"
      summary: "Add a new user"
      description: "Creates a new user profile in your organisation. By default, no emails will be sent when the user is created. To have an email sent to the user when they are created, the following query string parameter needs to be added to the request: &sendmessage=true"
      operationId: "addUser"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User detail object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        405:
          description: "Invalid input"
      security:
      - oAuth:
        - "admin"
    get:
      tags:
      - "users"
      summary: "Get a list of users"
      description: "Returns a list of people in your organisation including active and inactive people. By default only the first 100 people are returned. The list can be filtered on first or last name and paged using the optional paging parameters."
      operationId: "getAllUsers"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid input"
      security:
      - oAuth:
        - "admin"
        - "viewer"
      - api_key: []
  /users/{userId}:
    get:
      tags:
      - "users"
      summary: "Finds User by ID"
      description: "Returns a single user profile for the given user ID."
      operationId: "findUserByID"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
      security:
      - oAuth:
        - "admin"
        - "viewer"
      - api_key: []
    delete:
      tags:
      - "users"
      summary: "Delete user by ID"
      description: "Delete a single user profile in your organisation.  The user will be deleted completely from the system."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
      security:
      - oAuth:
        - "admin"
        - "viewer"
      - api_key: []
  /teams:
    post:
      tags:
      - "teams"
      summary: "Add a new team to your organization"
      description: "Creates a new team or sub team in your organisation."
      operationId: "addTeam"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Team info object that needs to be created in the organization"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        405:
          description: "Invalid input"
      security:
      - oAuth:
        - "admin"
        - "viewer"
      - api_key: []
    get:
      tags:
      - "teams"
      summary: "Get a list of teams"
      description: "Returns a list of teams in your organisation. By default only the first 100 teams are returned. The list can be filtered team name and paged using the optional paging parameters."
      operationId: "getAllTeams"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
      security:
      - oAuth:
        - "admin"
        - "viewer"
      - api_key: []
  /teams/{teamId}:
    get:
      tags:
      - "teams"
      summary: "Get team by ID."
      description: "Returns a single team for the given team Id."
      operationId: "findTeamById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
      security:
      - oAuth:
        - "admin"
        - "viewer"
      - api_key: []
    delete:
      tags:
      - "teams"
      summary: "Delete team by ID"
      description: "Delete a single team profile in your organisation.  The team Id in the Uri must match the Id specified in the request body."
      operationId: "deleteTeam"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "teamId"
        in: "path"
        description: "ID of team to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /courses:
    get:
      tags:
      - "courses"
      summary: "Get all courses"
      description: "Get a list of all courses within your organisation."
      operationId: "getAllCourses"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
      security:
      - oAuth:
        - "admin"
        - "viewer"
      - api_key: []
  /courses/{courseId}:
    get:
      tags:
      - "courses"
      summary: "Find course by ID"
      description: "Returns a single course by ID"
      operationId: "findCourseById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "courseId"
        in: "path"
        description: "ID of course to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid status value"
      security:
      - oAuth:
        - "admin"
        - "viewer"
      - api_key: []
securityDefinitions:
  oAuth:
    type: "oauth2"
    authorizationUrl: "apijams-amer-10-test.apigee.net/oauth/client-credentials"
    flow: "implicit"
    scopes:
      admin: "full read/write access to the data"
      viewer: "only read access to the data"
  api_key:
    type: "apiKey"
    name: "apikey"
    in: "query"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "User"
  Team:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      description:
        type: "string"
    xml:
      name: "Team"
externalDocs:
  description: "Find out more about Litmos"
  url: "http://litmos.com"